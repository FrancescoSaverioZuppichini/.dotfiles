/// <reference types="node" />
import { EventEmitter } from 'events';
import puppeteer from 'puppeteer-core';
import { ConvertType } from './converter';
import { File } from './file';
import TypedEventEmitter from './utils/typed-event-emitter';
export declare namespace Preview {
    interface Events {
        close(window: any): void;
        exit(): void;
        launch(): void;
        open(window: any, location: string): void;
        opening(location: string): void;
    }
    interface Options {
        height: number;
        width: number;
    }
}
export declare class Preview extends TypedEventEmitter<Preview.Events> {
    readonly options: Preview.Options;
    private puppeteerInternal;
    constructor(opts?: Partial<Preview.Options>);
    get puppeteer(): puppeteer.Browser | undefined;
    open(location: string): Promise<EventEmitter & {
        page: puppeteer.Page;
        close: () => Promise<void>;
        load: (uri: string) => Promise<void>;
    }>;
    exit(): Promise<void>;
    private createWindowObject;
    private createWindow;
    private launch;
}
export declare function fileToURI(file: File, type: ConvertType): string;
